// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shopproduct.proto

package go_micro_service_shop_product

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShopProduct service

func NewShopProductEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShopProduct service

type ShopProductService interface {
	AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ResponseProduct, error)
	FindProductByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ProductInfo, error)
	UpdateProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*Response, error)
	DeleteProductByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error)
	FindAllProduct(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*AllProduct, error)
}

type shopProductService struct {
	c    client.Client
	name string
}

func NewShopProductService(name string, c client.Client) ShopProductService {
	return &shopProductService{
		c:    c,
		name: name,
	}
}

func (c *shopProductService) AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ResponseProduct, error) {
	req := c.c.NewRequest(c.name, "ShopProduct.AddProduct", in)
	out := new(ResponseProduct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductService) FindProductByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ProductInfo, error) {
	req := c.c.NewRequest(c.name, "ShopProduct.FindProductByID", in)
	out := new(ProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductService) UpdateProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopProduct.UpdateProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductService) DeleteProductByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopProduct.DeleteProductByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductService) FindAllProduct(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*AllProduct, error) {
	req := c.c.NewRequest(c.name, "ShopProduct.FindAllProduct", in)
	out := new(AllProduct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopProduct service

type ShopProductHandler interface {
	AddProduct(context.Context, *ProductInfo, *ResponseProduct) error
	FindProductByID(context.Context, *RequestID, *ProductInfo) error
	UpdateProduct(context.Context, *ProductInfo, *Response) error
	DeleteProductByID(context.Context, *RequestID, *Response) error
	FindAllProduct(context.Context, *RequestAll, *AllProduct) error
}

func RegisterShopProductHandler(s server.Server, hdlr ShopProductHandler, opts ...server.HandlerOption) error {
	type shopProduct interface {
		AddProduct(ctx context.Context, in *ProductInfo, out *ResponseProduct) error
		FindProductByID(ctx context.Context, in *RequestID, out *ProductInfo) error
		UpdateProduct(ctx context.Context, in *ProductInfo, out *Response) error
		DeleteProductByID(ctx context.Context, in *RequestID, out *Response) error
		FindAllProduct(ctx context.Context, in *RequestAll, out *AllProduct) error
	}
	type ShopProduct struct {
		shopProduct
	}
	h := &shopProductHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopProduct{h}, opts...))
}

type shopProductHandler struct {
	ShopProductHandler
}

func (h *shopProductHandler) AddProduct(ctx context.Context, in *ProductInfo, out *ResponseProduct) error {
	return h.ShopProductHandler.AddProduct(ctx, in, out)
}

func (h *shopProductHandler) FindProductByID(ctx context.Context, in *RequestID, out *ProductInfo) error {
	return h.ShopProductHandler.FindProductByID(ctx, in, out)
}

func (h *shopProductHandler) UpdateProduct(ctx context.Context, in *ProductInfo, out *Response) error {
	return h.ShopProductHandler.UpdateProduct(ctx, in, out)
}

func (h *shopProductHandler) DeleteProductByID(ctx context.Context, in *RequestID, out *Response) error {
	return h.ShopProductHandler.DeleteProductByID(ctx, in, out)
}

func (h *shopProductHandler) FindAllProduct(ctx context.Context, in *RequestAll, out *AllProduct) error {
	return h.ShopProductHandler.FindAllProduct(ctx, in, out)
}
